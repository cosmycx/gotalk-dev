// Code generated by protoc-gen-go. DO NOT EDIT.
// source: greet.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NumberRequest struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumberRequest) Reset()         { *m = NumberRequest{} }
func (m *NumberRequest) String() string { return proto.CompactTextString(m) }
func (*NumberRequest) ProtoMessage()    {}
func (*NumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32c0044392f32579, []int{0}
}

func (m *NumberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumberRequest.Unmarshal(m, b)
}
func (m *NumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumberRequest.Marshal(b, m, deterministic)
}
func (m *NumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberRequest.Merge(m, src)
}
func (m *NumberRequest) XXX_Size() int {
	return xxx_messageInfo_NumberRequest.Size(m)
}
func (m *NumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NumberRequest proto.InternalMessageInfo

func (m *NumberRequest) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type NumberResponse struct {
	NumDouble            int32    `protobuf:"varint,1,opt,name=numDouble,proto3" json:"numDouble,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumberResponse) Reset()         { *m = NumberResponse{} }
func (m *NumberResponse) String() string { return proto.CompactTextString(m) }
func (*NumberResponse) ProtoMessage()    {}
func (*NumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32c0044392f32579, []int{1}
}

func (m *NumberResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumberResponse.Unmarshal(m, b)
}
func (m *NumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumberResponse.Marshal(b, m, deterministic)
}
func (m *NumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberResponse.Merge(m, src)
}
func (m *NumberResponse) XXX_Size() int {
	return xxx_messageInfo_NumberResponse.Size(m)
}
func (m *NumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NumberResponse proto.InternalMessageInfo

func (m *NumberResponse) GetNumDouble() int32 {
	if m != nil {
		return m.NumDouble
	}
	return 0
}

func init() {
	proto.RegisterType((*NumberRequest)(nil), "calcs.NumberRequest")
	proto.RegisterType((*NumberResponse)(nil), "calcs.NumberResponse")
}

func init() { proto.RegisterFile("greet.proto", fileDescriptor_32c0044392f32579) }

var fileDescriptor_32c0044392f32579 = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2f, 0x4a, 0x4d,
	0x2d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x4e, 0xcc, 0x49, 0x2e, 0x56, 0x52,
	0xe4, 0xe2, 0xf5, 0x2b, 0xcd, 0x4d, 0x4a, 0x2d, 0x0a, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11,
	0x12, 0xe0, 0x62, 0xce, 0x2b, 0xcd, 0x95, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0x31, 0x95,
	0xf4, 0xb8, 0xf8, 0x60, 0x4a, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x64, 0xb8, 0x38, 0xf3,
	0x4a, 0x73, 0x5d, 0xf2, 0x4b, 0x93, 0x72, 0x52, 0xa1, 0x2a, 0x11, 0x02, 0x46, 0xfe, 0x5c, 0xbc,
	0x10, 0x56, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x1d, 0x17, 0xa7, 0x7b, 0x6a, 0x09,
	0x44, 0x4c, 0x48, 0x44, 0x0f, 0x6c, 0xb1, 0x1e, 0x8a, 0xad, 0x52, 0xa2, 0x68, 0xa2, 0x10, 0x8b,
	0x94, 0x18, 0x34, 0x18, 0x0d, 0x18, 0x9d, 0xd8, 0xa2, 0x58, 0x72, 0x13, 0x33, 0xf3, 0x92, 0xd8,
	0xc0, 0x2e, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x7f, 0x64, 0x02, 0xc8, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DoubleServiceClient is the client API for DoubleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DoubleServiceClient interface {
	GetDouble(ctx context.Context, opts ...grpc.CallOption) (DoubleService_GetDoubleClient, error)
}

type doubleServiceClient struct {
	cc *grpc.ClientConn
}

func NewDoubleServiceClient(cc *grpc.ClientConn) DoubleServiceClient {
	return &doubleServiceClient{cc}
}

func (c *doubleServiceClient) GetDouble(ctx context.Context, opts ...grpc.CallOption) (DoubleService_GetDoubleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DoubleService_serviceDesc.Streams[0], "/calcs.DoubleService/GetDouble", opts...)
	if err != nil {
		return nil, err
	}
	x := &doubleServiceGetDoubleClient{stream}
	return x, nil
}

type DoubleService_GetDoubleClient interface {
	Send(*NumberRequest) error
	Recv() (*NumberResponse, error)
	grpc.ClientStream
}

type doubleServiceGetDoubleClient struct {
	grpc.ClientStream
}

func (x *doubleServiceGetDoubleClient) Send(m *NumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *doubleServiceGetDoubleClient) Recv() (*NumberResponse, error) {
	m := new(NumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DoubleServiceServer is the server API for DoubleService service.
type DoubleServiceServer interface {
	GetDouble(DoubleService_GetDoubleServer) error
}

func RegisterDoubleServiceServer(s *grpc.Server, srv DoubleServiceServer) {
	s.RegisterService(&_DoubleService_serviceDesc, srv)
}

func _DoubleService_GetDouble_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DoubleServiceServer).GetDouble(&doubleServiceGetDoubleServer{stream})
}

type DoubleService_GetDoubleServer interface {
	Send(*NumberResponse) error
	Recv() (*NumberRequest, error)
	grpc.ServerStream
}

type doubleServiceGetDoubleServer struct {
	grpc.ServerStream
}

func (x *doubleServiceGetDoubleServer) Send(m *NumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *doubleServiceGetDoubleServer) Recv() (*NumberRequest, error) {
	m := new(NumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DoubleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calcs.DoubleService",
	HandlerType: (*DoubleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDouble",
			Handler:       _DoubleService_GetDouble_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greet.proto",
}
